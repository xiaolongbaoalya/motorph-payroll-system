package com;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import com.compprog1282025.model.Employee;
import com.compprog1282025.util.CSVReader;
import java.util.List;
import java.util.Optional;
import com.compprog1282025.model.Attendance;
import com.compprog1282025.service.AttendanceService;
import com.compprog1282025.service.PayrollService;
import com.compprog1282025.service.DataLoaderService;
import com.compprog1282025.util.DeductionsUtil;
import java.time.YearMonth;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Arrays;
import javax.swing.table.DefaultTableModel;
import com.compprog1282025.util.CSVWriter;
import java.io.IOException;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author tin
 */
public class UnfinishedGUI extends javax.swing.JFrame {

    private List<Employee> employeeList;
    private Employee loggedInEmployee;
    private JPanel mainContentPanel;
    private AttendanceService attendanceService;
    private PayrollService payrollService;
    private List<Attendance> attendanceList;
    private JPanel loginPanel;

    /**
     * Creates new form UnfinishedGUI
     */
    public UnfinishedGUI() {
        try {
            DataLoaderService loader = new DataLoaderService();
            loader.loadAllData();
            employeeList = loader.getEmployees();
            attendanceList = loader.getAttendanceRecords();
            attendanceService = new AttendanceService(attendanceList);
            payrollService = new PayrollService(attendanceService);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to load employees or attendance: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            employeeList = java.util.Collections.emptyList();
            attendanceList = java.util.Collections.emptyList();
            attendanceService = null;
            payrollService = null;
        }
        initComponents();
        setSize(800, 600);
        setMinimumSize(new Dimension(800, 600));
        setLocationRelativeTo(null);
        showLoginPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainContentPanel = new JPanel(new BorderLayout());
        add(mainContentPanel, BorderLayout.CENTER);
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showLoginPanel() {
        loginPanel = new JPanel();
        loginPanel.setLayout(new BoxLayout(loginPanel, BoxLayout.Y_AXIS));
        loginPanel.setBorder(BorderFactory.createEmptyBorder(100, 200, 100, 200));
        JLabel welcomeLabel = new JLabel("Welcome to MotorPH!");
        welcomeLabel.setFont(new Font("Arial", Font.BOLD, 28));
        welcomeLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        JLabel loginAsLabel = new JLabel("Log in as:");
        loginAsLabel.setFont(new Font("Arial", Font.PLAIN, 18));
        loginAsLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        JButton btnEmployee = new JButton("Employee");
        btnEmployee.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        btnEmployee.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnEmployee.setBackground(new Color(0x1c3680));
        btnEmployee.setForeground(Color.WHITE);
        btnEmployee.setFocusPainted(false);
        btnEmployee.setOpaque(true);
        btnEmployee.setBorderPainted(false);
        btnEmployee.addActionListener(this::jButtonEmployeeActionPerformed);
        JButton btnAdmin = new JButton("Admin");
        btnAdmin.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        btnAdmin.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnAdmin.setBackground(new Color(0x1c3680));
        btnAdmin.setForeground(Color.WHITE);
        btnAdmin.setFocusPainted(false);
        btnAdmin.setOpaque(true);
        btnAdmin.setBorderPainted(false);
        btnAdmin.addActionListener(this::jButtonAdminActionPerformed);
        loginPanel.add(welcomeLabel);
        loginPanel.add(Box.createVerticalStrut(30));
        loginPanel.add(loginAsLabel);
        loginPanel.add(Box.createVerticalStrut(20));
        loginPanel.add(btnEmployee);
        loginPanel.add(Box.createVerticalStrut(10));
        loginPanel.add(btnAdmin);
        mainContentPanel.removeAll();
        mainContentPanel.add(loginPanel, BorderLayout.CENTER);
        mainContentPanel.revalidate();
        mainContentPanel.repaint();
    }

    private void jButtonEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmployeeActionPerformed
        // Create login dialog for employee
        javax.swing.JDialog loginDialog = new javax.swing.JDialog(this, "Employee Login", true);
        loginDialog.setLayout(new java.awt.GridLayout(3, 2, 10, 10));
        
        javax.swing.JTextField empNumberField = new javax.swing.JTextField();
        javax.swing.JPasswordField passwordField = new javax.swing.JPasswordField();
        javax.swing.JButton loginButton = new javax.swing.JButton("Login");
        javax.swing.JLabel messageLabel = new javax.swing.JLabel("");
        
        loginDialog.add(new javax.swing.JLabel("Employee Number:"));
        loginDialog.add(empNumberField);
        loginDialog.add(new javax.swing.JLabel("Password:"));
        loginDialog.add(passwordField);
        loginDialog.add(loginButton);
        loginDialog.add(messageLabel);
        
        loginButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        loginButton.setBackground(new Color(0x1c3680));
        loginButton.setForeground(Color.WHITE);
        loginButton.setFocusPainted(false);
        loginButton.setOpaque(true);
        loginButton.setBorderPainted(false);
        
        loginButton.addActionListener(e -> {
            String empNumberStr = empNumberField.getText().trim();
            String password = new String(passwordField.getPassword());
            if (empNumberStr.equalsIgnoreCase("admin")) {
                messageLabel.setText("Invalid employee number!");
                return;
            }
            try {
                int empNumber = Integer.parseInt(empNumberStr);
                Optional<Employee> found = employeeList.stream().filter(emp -> emp.getEmployeeNumber() == empNumber).findFirst();
                if (found.isPresent() && password.equals("password")) {
                    loggedInEmployee = found.get();
                    messageLabel.setText("Login successful!");
                    loginDialog.dispose();
                    mainContentPanel.remove(loginPanel);
                    showEmployeeInfoPanel();
                } else {
                    messageLabel.setText("Invalid credentials!");
                }
            } catch (NumberFormatException ex) {
                messageLabel.setText("Invalid employee number!");
            }
        });
        
        loginDialog.pack();
        loginDialog.setLocationRelativeTo(this);
        loginDialog.setVisible(true);
    }//GEN-LAST:event_jButtonEmployeeActionPerformed

    private void showEmployeeInfoPanel() {
        JPanel outerPanel = new JPanel(new GridBagLayout());
        outerPanel.setBackground(new Color(240, 243, 250));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.insets = new Insets(20, 0, 20, 0);

        JPanel cardPanel = new JPanel();
        cardPanel.setLayout(new BoxLayout(cardPanel, BoxLayout.Y_AXIS));
        cardPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 220), 2, true),
            BorderFactory.createEmptyBorder(20, 30, 20, 30)
        ));
        cardPanel.setBackground(Color.WHITE);

        JLabel header = new JLabel("Employee Information");
        header.setFont(new Font("Segoe UI", Font.BOLD, 22));
        header.setAlignmentX(Component.LEFT_ALIGNMENT);
        header.setForeground(new Color(28, 54, 128));
        cardPanel.add(header);
        cardPanel.add(Box.createVerticalStrut(18));

        Font labelFont = new Font("Segoe UI", Font.PLAIN, 16);
        String[] info = {
            "Employee Number: " + loggedInEmployee.getEmployeeNumber(),
            "Name: " + loggedInEmployee.getFullName(),
            "Birthday: " + loggedInEmployee.getBirthday(),
            "Address: " + loggedInEmployee.getContact().getAddress(),
            "Phone: " + loggedInEmployee.getContact().getPhoneNumber(),
            "SSS #: " + loggedInEmployee.getGovernmentID().getSss(),
            "PhilHealth #: " + loggedInEmployee.getGovernmentID().getPhilhealth(),
            "TIN #: " + loggedInEmployee.getGovernmentID().getTin(),
            "Pag-IBIG #: " + loggedInEmployee.getGovernmentID().getPagibig(),
            "Status: " + loggedInEmployee.getStatus(),
            "Position: " + loggedInEmployee.getPosition().getPosition(),
            "Immediate Supervisor: " + (loggedInEmployee.getPosition().getSupervisor() != null ? loggedInEmployee.getPosition().getSupervisor().getFullName() : "N/A"),
            "Basic Salary: " + loggedInEmployee.getCompensation().getBasicSalary(),
            "Rice Subsidy: " + loggedInEmployee.getCompensation().getRiceSubsidy(),
            "Phone Allowance: " + loggedInEmployee.getCompensation().getPhoneAllowance(),
            "Clothing Allowance: " + loggedInEmployee.getCompensation().getClothingAllowance(),
            "Gross Semi-monthly Rate: " + loggedInEmployee.getCompensation().getSemiGross(),
            "Hourly Rate: " + loggedInEmployee.getCompensation().getHourlyRate()
        };
        for (String line : info) {
            JLabel lbl = new JLabel(line);
            lbl.setFont(labelFont);
            lbl.setAlignmentX(Component.LEFT_ALIGNMENT);
            cardPanel.add(lbl);
            cardPanel.add(Box.createVerticalStrut(4));
        }
        cardPanel.add(Box.createVerticalStrut(10));

        outerPanel.add(cardPanel, gbc);
        mainContentPanel.removeAll();
        mainContentPanel.add(outerPanel, BorderLayout.CENTER);
        mainContentPanel.revalidate();
        mainContentPanel.repaint();
    }

    private void jButtonAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdminActionPerformed
        // Create login dialog for admin
        javax.swing.JDialog loginDialog = new javax.swing.JDialog(this, "Admin Login", true);
        loginDialog.setLayout(new java.awt.GridLayout(4, 2, 10, 10));
        
        javax.swing.JTextField usernameField = new javax.swing.JTextField();
        javax.swing.JPasswordField passwordField = new javax.swing.JPasswordField();
        javax.swing.JButton loginButton = new javax.swing.JButton("Login");
        javax.swing.JLabel messageLabel = new javax.swing.JLabel("");
        
        loginDialog.add(new javax.swing.JLabel("Username:"));
        loginDialog.add(usernameField);
        loginDialog.add(new javax.swing.JLabel("Password:"));
        loginDialog.add(passwordField);
        loginDialog.add(loginButton);
        loginDialog.add(messageLabel);
        
        loginButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        loginButton.setBackground(new Color(0x1c3680));
        loginButton.setForeground(Color.WHITE);
        loginButton.setFocusPainted(false);
        loginButton.setOpaque(true);
        loginButton.setBorderPainted(false);
        
        loginButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());
            
            if (username.equals("admin") && password.equals("password")) {
                messageLabel.setText("Login successful!");
                loginDialog.dispose();
                mainContentPanel.remove(loginPanel);
                showAdminDashboard();
            } else {
                messageLabel.setText("Invalid username or password!");
            }
        });
        
        loginDialog.pack();
        loginDialog.setLocationRelativeTo(this);
        loginDialog.setVisible(true);
    }//GEN-LAST:event_jButtonAdminActionPerformed

    private void showAdminDashboard() {
        // Column names for the summary table
        String[] columnNames = {"Employee Number", "Last Name", "First Name", "SSS Number", "PhilHealth Number", "TIN", "Pag-IBIG Number"};
        // Data for the table
        String[][] data = new String[employeeList.size()][7];
        for (int i = 0; i < employeeList.size(); i++) {
            Employee emp = employeeList.get(i);
            data[i][0] = String.valueOf(emp.getEmployeeNumber());
            data[i][1] = emp.getLastName();
            data[i][2] = emp.getFirstName();
            data[i][3] = emp.getGovernmentID().getSss();
            data[i][4] = emp.getGovernmentID().getPhilhealth();
            data[i][5] = emp.getGovernmentID().getTin();
            data[i][6] = emp.getGovernmentID().getPagibig();
        }
        DefaultTableModel model = new DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JTable employeeTable = new JTable(model);
        employeeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scrollPane = new JScrollPane(employeeTable);

        JButton viewButton = new JButton("View Employee");
        viewButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        viewButton.setBackground(new Color(0x1c3680));
        viewButton.setForeground(Color.WHITE);
        viewButton.setFocusPainted(false);
        viewButton.setOpaque(true);
        viewButton.setBorderPainted(false);
        viewButton.addActionListener(e -> {
            int selectedRow = employeeTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select an employee to view.", "No Selection", JOptionPane.WARNING_MESSAGE);
                return;
            }
            int empNumber = Integer.parseInt((String) employeeTable.getValueAt(selectedRow, 0));
            Employee selectedEmp = employeeList.stream().filter(emp -> emp.getEmployeeNumber() == empNumber).findFirst().orElse(null);
            if (selectedEmp != null) {
                showEmployeeDetailsFrame(selectedEmp);
            }
        });

        JButton updateButton = new JButton("Update");
        updateButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        updateButton.setBackground(new Color(0x1c3680));
        updateButton.setForeground(Color.WHITE);
        updateButton.setFocusPainted(false);
        updateButton.setOpaque(true);
        updateButton.setBorderPainted(false);
        updateButton.addActionListener(e -> {
            int selectedRow = employeeTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select an employee to update.", "No Selection", JOptionPane.WARNING_MESSAGE);
                return;
            }
            int empNumber = Integer.parseInt((String) employeeTable.getValueAt(selectedRow, 0));
            Employee selectedEmp = employeeList.stream().filter(emp -> emp.getEmployeeNumber() == empNumber).findFirst().orElse(null);
            if (selectedEmp != null) {
                showUpdateEmployeeFrame(selectedEmp);
            }
        });

        JButton newButton = new JButton("New Employee");
        newButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        newButton.setBackground(new Color(0x1c3680));
        newButton.setForeground(Color.WHITE);
        newButton.setFocusPainted(false);
        newButton.setOpaque(true);
        newButton.setBorderPainted(false);
        newButton.addActionListener(e -> showNewEmployeeFrame());

        JButton deleteButton = new JButton("Delete");
        deleteButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        deleteButton.setBackground(new Color(0x1c3680));
        deleteButton.setForeground(Color.WHITE);
        deleteButton.setFocusPainted(false);
        deleteButton.setOpaque(true);
        deleteButton.setBorderPainted(false);
        deleteButton.addActionListener(e -> {
            int selectedRow = employeeTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select an employee to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
                return;
            }
            int empNumber = Integer.parseInt((String) employeeTable.getValueAt(selectedRow, 0));
            Employee selectedEmp = employeeList.stream().filter(emp -> emp.getEmployeeNumber() == empNumber).findFirst().orElse(null);
            if (selectedEmp != null) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this employee?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    employeeList.remove(selectedEmp);
                    try {
                        CSVWriter.writeAllEmployeesToCSV(employeeList, "src/main/resources/employees.csv");
                        showAdminDashboard();
                        JOptionPane.showMessageDialog(this, "Employee deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Error deleting employee: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });

        JPanel adminPanel = new JPanel();
        adminPanel.setLayout(new BorderLayout());
        adminPanel.add(scrollPane, BorderLayout.CENTER);
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS));
        buttonPanel.add(Box.createHorizontalStrut(10));
        buttonPanel.add(viewButton);
        buttonPanel.add(Box.createHorizontalStrut(10));
        buttonPanel.add(updateButton);
        buttonPanel.add(Box.createHorizontalStrut(10));
        buttonPanel.add(newButton);
        buttonPanel.add(Box.createHorizontalStrut(10));
        buttonPanel.add(deleteButton);
        adminPanel.add(buttonPanel, BorderLayout.SOUTH);

        mainContentPanel.removeAll();
        mainContentPanel.add(adminPanel, BorderLayout.CENTER);
        mainContentPanel.revalidate();
        mainContentPanel.repaint();
    }

    private void showEmployeeDetailsFrame(Employee emp) {
        JFrame detailsFrame = new JFrame("Employee Details");
        detailsFrame.setSize(500, 650);
        detailsFrame.setLocationRelativeTo(this);
        JPanel infoPanel = new JPanel();
        infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
        infoPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        // Information header
        JLabel infoHeader = new JLabel("Information");
        infoHeader.setFont(new Font("Arial", Font.BOLD, 20));
        infoHeader.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(Box.createVerticalStrut(10));
        infoPanel.add(infoHeader);
        infoPanel.add(Box.createVerticalStrut(10));
        // Employee details
        JLabel empNumLabel = new JLabel("Employee Number: " + emp.getEmployeeNumber());
        empNumLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(empNumLabel);
        JLabel nameLabel = new JLabel("Name: " + emp.getFullName());
        nameLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(nameLabel);
        JLabel bdayLabel = new JLabel("Birthday: " + emp.getBirthday());
        bdayLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(bdayLabel);
        JLabel addressLabel = new JLabel("Address: " + emp.getContact().getAddress());
        addressLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(addressLabel);
        JLabel phoneLabel = new JLabel("Phone: " + emp.getContact().getPhoneNumber());
        phoneLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(phoneLabel);
        JLabel sssLabel = new JLabel("SSS #: " + emp.getGovernmentID().getSss());
        sssLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(sssLabel);
        JLabel philhealthLabel = new JLabel("PhilHealth #: " + emp.getGovernmentID().getPhilhealth());
        philhealthLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(philhealthLabel);
        JLabel tinLabel = new JLabel("TIN #: " + emp.getGovernmentID().getTin());
        tinLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(tinLabel);
        JLabel pagibigLabel = new JLabel("Pag-IBIG #: " + emp.getGovernmentID().getPagibig());
        pagibigLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(pagibigLabel);
        JLabel statusLabel = new JLabel("Status: " + emp.getStatus());
        statusLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(statusLabel);
        JLabel positionLabel = new JLabel("Position: " + emp.getPosition().getPosition());
        positionLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(positionLabel);
        JLabel supervisorLabel = new JLabel("Immediate Supervisor: " + (emp.getPosition().getSupervisor() != null ? emp.getPosition().getSupervisor().getFullName() : "N/A"));
        supervisorLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(supervisorLabel);
        JLabel basicSalaryLabel = new JLabel("Basic Salary: " + emp.getCompensation().getBasicSalary());
        basicSalaryLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(basicSalaryLabel);
        JLabel riceLabel = new JLabel("Rice Subsidy: " + emp.getCompensation().getRiceSubsidy());
        riceLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(riceLabel);
        JLabel phoneAllowanceLabel = new JLabel("Phone Allowance: " + emp.getCompensation().getPhoneAllowance());
        phoneAllowanceLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(phoneAllowanceLabel);
        JLabel clothingLabel = new JLabel("Clothing Allowance: " + emp.getCompensation().getClothingAllowance());
        clothingLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(clothingLabel);
        JLabel semiGrossLabel = new JLabel("Gross Semi-monthly Rate: " + emp.getCompensation().getSemiGross());
        semiGrossLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(semiGrossLabel);
        JLabel hourlyLabel = new JLabel("Hourly Rate: " + emp.getCompensation().getHourlyRate());
        hourlyLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(hourlyLabel);
        infoPanel.add(Box.createVerticalStrut(20));

        // Compute Salary header
        JLabel computeHeader = new JLabel("Compute Salary");
        computeHeader.setFont(new Font("Arial", Font.BOLD, 18));
        computeHeader.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(computeHeader);
        infoPanel.add(Box.createVerticalStrut(10));

        // Month/Year selectors
        JPanel computePanel = new JPanel();
        computePanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        computePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        computePanel.add(new JLabel("Select Month:"));
        String[] months = Arrays.stream(java.time.Month.values())
            .map(m -> m.toString().substring(0,1) + m.toString().substring(1).toLowerCase().substring(0,2))
            .toArray(String[]::new);
        JComboBox<String> monthBox = new JComboBox<>(months);
        computePanel.add(monthBox);
        computePanel.add(new JLabel("Year:"));
        int currentYear = Calendar.getInstance().get(Calendar.YEAR);
        SpinnerNumberModel yearModel = new SpinnerNumberModel(currentYear, 2000, currentYear+10, 1);
        JSpinner yearSpinner = new JSpinner(yearModel);
        // Fix year spinner to use plain integer format
        JSpinner.NumberEditor editor = new JSpinner.NumberEditor(yearSpinner, "####");
        yearSpinner.setEditor(editor);
        computePanel.add(yearSpinner);
        JButton computeButton = new JButton("Compute");
        computeButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        computeButton.setBackground(new Color(0x1c3680));
        computeButton.setForeground(Color.WHITE);
        computeButton.setFocusPainted(false);
        computeButton.setOpaque(true);
        computeButton.setBorderPainted(false);
        computePanel.add(computeButton);
        infoPanel.add(computePanel);

        JPanel resultPanel = new JPanel();
        resultPanel.setLayout(new BoxLayout(resultPanel, BoxLayout.Y_AXIS));
        resultPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(resultPanel);

        computeButton.addActionListener(e -> {
            int month = monthBox.getSelectedIndex() + 1;
            int year = (int) yearSpinner.getValue();
            YearMonth ym = YearMonth.of(year, month);
            double hoursWorked = attendanceService.calculateMonthlyHours(emp, ym);
            resultPanel.removeAll();
            if (hoursWorked == 0) {
                resultPanel.add(new JLabel("No attendance records for this period."));
            } else {
                double gross = payrollService.calculateMonthlySalary(emp, ym);
                double net = payrollService.calculateNetSalary(emp, ym);
                double sss = DeductionsUtil.calculateSSS(gross);
                double philhealth = DeductionsUtil.calculatePhilhealth(gross);
                double pagibig = DeductionsUtil.calculatePagIbig(gross);
                double taxable = gross - (sss + philhealth + pagibig);
                double tax = DeductionsUtil.calculateWithholdingTax(taxable);
                resultPanel.add(new JLabel("--- Salary Computation for " + ym + " ---"));
                resultPanel.add(new JLabel(String.format("Gross Salary: %.2f", gross)));
                resultPanel.add(new JLabel(String.format("SSS Deduction: %.2f", sss)));
                resultPanel.add(new JLabel(String.format("PhilHealth Deduction: %.2f", philhealth)));
                resultPanel.add(new JLabel(String.format("Pag-IBIG Deduction: %.2f", pagibig)));
                resultPanel.add(new JLabel(String.format("Withholding Tax: %.2f", tax)));
                resultPanel.add(new JLabel(String.format("Net Salary: %.2f", net)));
            }
            resultPanel.revalidate();
            resultPanel.repaint();
        });

        JScrollPane scrollPane = new JScrollPane(infoPanel);
        detailsFrame.add(scrollPane);
        detailsFrame.setVisible(true);
    }

    private void showUpdateEmployeeFrame(Employee emp) {
        JFrame updateFrame = new JFrame("Update Employee");
        updateFrame.setSize(400, 600);
        updateFrame.setLocationRelativeTo(this);
        JPanel formPanel = new JPanel();
        formPanel.setLayout(new BoxLayout(formPanel, BoxLayout.Y_AXIS));
        JTextField tfEmpNum = new JTextField(String.valueOf(emp.getEmployeeNumber()));
        tfEmpNum.setEditable(false);
        JTextField tfLastName = new JTextField(emp.getLastName());
        JTextField tfFirstName = new JTextField(emp.getFirstName());
        JTextField tfBirthday = new JTextField(emp.getBirthday().toString());
        JTextField tfAddress = new JTextField(emp.getContact().getAddress());
        JTextField tfPhone = new JTextField(emp.getContact().getPhoneNumber());
        JTextField tfSSS = new JTextField(emp.getGovernmentID().getSss());
        JTextField tfPhilHealth = new JTextField(emp.getGovernmentID().getPhilhealth());
        JTextField tfTIN = new JTextField(emp.getGovernmentID().getTin());
        JTextField tfPagibig = new JTextField(emp.getGovernmentID().getPagibig());
        JTextField tfStatus = new JTextField(emp.getStatus());
        JTextField tfPosition = new JTextField(emp.getPosition().getPosition());
        JTextField tfSupervisor = new JTextField(emp.getPosition().getSupervisor() != null ? emp.getPosition().getSupervisor().getFullName() : "");
        JTextField tfBasicSalary = new JTextField(String.valueOf(emp.getCompensation().getBasicSalary()));
        JTextField tfRiceSubsidy = new JTextField(String.valueOf(emp.getCompensation().getRiceSubsidy()));
        JTextField tfPhoneAllowance = new JTextField(String.valueOf(emp.getCompensation().getPhoneAllowance()));
        JTextField tfClothingAllowance = new JTextField(String.valueOf(emp.getCompensation().getClothingAllowance()));
        JTextField tfSemiGross = new JTextField(String.valueOf(emp.getCompensation().getSemiGross()));
        JTextField tfHourlyRate = new JTextField(String.valueOf(emp.getCompensation().getHourlyRate()));
        formPanel.add(new JLabel("Employee Number:")); formPanel.add(tfEmpNum);
        formPanel.add(new JLabel("Last Name:")); formPanel.add(tfLastName);
        formPanel.add(new JLabel("First Name:")); formPanel.add(tfFirstName);
        formPanel.add(new JLabel("Birthday (yyyy-MM-dd):")); formPanel.add(tfBirthday);
        formPanel.add(new JLabel("Address:")); formPanel.add(tfAddress);
        formPanel.add(new JLabel("Phone Number:")); formPanel.add(tfPhone);
        formPanel.add(new JLabel("SSS Number:")); formPanel.add(tfSSS);
        formPanel.add(new JLabel("PhilHealth Number:")); formPanel.add(tfPhilHealth);
        formPanel.add(new JLabel("TIN:")); formPanel.add(tfTIN);
        formPanel.add(new JLabel("Pag-IBIG Number:")); formPanel.add(tfPagibig);
        formPanel.add(new JLabel("Status:")); formPanel.add(tfStatus);
        formPanel.add(new JLabel("Position:")); formPanel.add(tfPosition);
        formPanel.add(new JLabel("Immediate Supervisor (Full Name):")); formPanel.add(tfSupervisor);
        formPanel.add(new JLabel("Basic Salary:")); formPanel.add(tfBasicSalary);
        formPanel.add(new JLabel("Rice Subsidy:")); formPanel.add(tfRiceSubsidy);
        formPanel.add(new JLabel("Phone Allowance:")); formPanel.add(tfPhoneAllowance);
        formPanel.add(new JLabel("Clothing Allowance:")); formPanel.add(tfClothingAllowance);
        formPanel.add(new JLabel("Gross Semi-monthly Rate:")); formPanel.add(tfSemiGross);
        formPanel.add(new JLabel("Hourly Rate:")); formPanel.add(tfHourlyRate);
        JButton saveButton = new JButton("Save");
        saveButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        saveButton.setBackground(new Color(0x1c3680));
        saveButton.setForeground(Color.WHITE);
        saveButton.setFocusPainted(false);
        saveButton.setOpaque(true);
        saveButton.setBorderPainted(false);
        formPanel.add(Box.createVerticalStrut(10));
        formPanel.add(saveButton);
        updateFrame.add(new JScrollPane(formPanel));

        saveButton.addActionListener(e -> {
            try {
                // Update employee in memory
                emp.setLastName(tfLastName.getText().trim());
                emp.setFirstName(tfFirstName.getText().trim());
                emp.setBirthday(java.time.LocalDate.parse(tfBirthday.getText().trim()));
                emp.getContact().setAddress(tfAddress.getText().trim());
                emp.getContact().setPhoneNumber(tfPhone.getText().trim());
                emp.getGovernmentID().setSss(tfSSS.getText().trim());
                emp.getGovernmentID().setPhilhealth(tfPhilHealth.getText().trim());
                emp.getGovernmentID().setTin(tfTIN.getText().trim());
                emp.getGovernmentID().setPagibig(tfPagibig.getText().trim());
                emp.setStatus(tfStatus.getText().trim());
                emp.getPosition().setPosition(tfPosition.getText().trim());
                // Supervisor resolution
                String supervisorName = tfSupervisor.getText().trim();
                if (!supervisorName.isEmpty()) {
                    Employee supervisor = employeeList.stream()
                        .filter(sup -> (sup.getFirstName() + " " + sup.getLastName()).equalsIgnoreCase(supervisorName)
                            || (sup.getLastName() + ", " + sup.getFirstName()).equalsIgnoreCase(supervisorName)
                            || (sup.getLastName() + " " + sup.getFirstName()).equalsIgnoreCase(supervisorName))
                        .findFirst().orElse(null);
                    emp.getPosition().setSupervisor(supervisor);
                } else {
                    emp.getPosition().setSupervisor(null);
                }
                emp.getCompensation().setBasicSalary(Double.parseDouble(tfBasicSalary.getText().replace(",", "").replace("\"", "").trim()));
                emp.getCompensation().setRiceSubsidy(Double.parseDouble(tfRiceSubsidy.getText().replace(",", "").replace("\"", "").trim()));
                emp.getCompensation().setPhoneAllowance(Double.parseDouble(tfPhoneAllowance.getText().replace(",", "").replace("\"", "").trim()));
                emp.getCompensation().setClothingAllowance(Double.parseDouble(tfClothingAllowance.getText().replace(",", "").replace("\"", "").trim()));
                emp.getCompensation().setSemiGross(Double.parseDouble(tfSemiGross.getText().replace(",", "").replace("\"", "").trim()));
                emp.getCompensation().setHourlyRate(Double.parseDouble(tfHourlyRate.getText().replace(",", "").replace("\"", "").trim()));

                // Save all employees to CSV
                CSVWriter.writeAllEmployeesToCSV(employeeList, "src/main/resources/employees.csv");
                updateFrame.dispose();
                showAdminDashboard();
                JOptionPane.showMessageDialog(this, "Employee updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error updating employee: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        updateFrame.setVisible(true);
    }

    private void showNewEmployeeFrame() {
        JFrame newFrame = new JFrame("New Employee");
        newFrame.setSize(400, 600);
        newFrame.setLocationRelativeTo(this);
        JPanel formPanel = new JPanel();
        formPanel.setLayout(new BoxLayout(formPanel, BoxLayout.Y_AXIS));
        JTextField tfEmpNum = new JTextField();
        JTextField tfLastName = new JTextField();
        JTextField tfFirstName = new JTextField();
        JTextField tfBirthday = new JTextField();
        JTextField tfAddress = new JTextField();
        JTextField tfPhone = new JTextField();
        JTextField tfSSS = new JTextField();
        JTextField tfPhilHealth = new JTextField();
        JTextField tfTIN = new JTextField();
        JTextField tfPagibig = new JTextField();
        JTextField tfStatus = new JTextField();
        JTextField tfPosition = new JTextField();
        JTextField tfSupervisor = new JTextField();
        JTextField tfBasicSalary = new JTextField();
        JTextField tfRiceSubsidy = new JTextField();
        JTextField tfPhoneAllowance = new JTextField();
        JTextField tfClothingAllowance = new JTextField();
        JTextField tfSemiGross = new JTextField();
        JTextField tfHourlyRate = new JTextField();
        formPanel.add(new JLabel("Employee Number:")); formPanel.add(tfEmpNum);
        formPanel.add(new JLabel("Last Name:")); formPanel.add(tfLastName);
        formPanel.add(new JLabel("First Name:")); formPanel.add(tfFirstName);
        formPanel.add(new JLabel("Birthday (yyyy-MM-dd):")); formPanel.add(tfBirthday);
        formPanel.add(new JLabel("Address:")); formPanel.add(tfAddress);
        formPanel.add(new JLabel("Phone Number:")); formPanel.add(tfPhone);
        formPanel.add(new JLabel("SSS Number:")); formPanel.add(tfSSS);
        formPanel.add(new JLabel("PhilHealth Number:")); formPanel.add(tfPhilHealth);
        formPanel.add(new JLabel("TIN:")); formPanel.add(tfTIN);
        formPanel.add(new JLabel("Pag-IBIG Number:")); formPanel.add(tfPagibig);
        formPanel.add(new JLabel("Status:")); formPanel.add(tfStatus);
        formPanel.add(new JLabel("Position:")); formPanel.add(tfPosition);
        formPanel.add(new JLabel("Immediate Supervisor (Full Name):")); formPanel.add(tfSupervisor);
        formPanel.add(new JLabel("Basic Salary:")); formPanel.add(tfBasicSalary);
        formPanel.add(new JLabel("Rice Subsidy:")); formPanel.add(tfRiceSubsidy);
        formPanel.add(new JLabel("Phone Allowance:")); formPanel.add(tfPhoneAllowance);
        formPanel.add(new JLabel("Clothing Allowance:")); formPanel.add(tfClothingAllowance);
        formPanel.add(new JLabel("Gross Semi-monthly Rate:")); formPanel.add(tfSemiGross);
        formPanel.add(new JLabel("Hourly Rate:")); formPanel.add(tfHourlyRate);
        JButton saveButton = new JButton("Save");
        saveButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        saveButton.setBackground(new Color(0x1c3680));
        saveButton.setForeground(Color.WHITE);
        saveButton.setFocusPainted(false);
        saveButton.setOpaque(true);
        saveButton.setBorderPainted(false);
        formPanel.add(Box.createVerticalStrut(10));
        formPanel.add(saveButton);
        newFrame.add(new JScrollPane(formPanel));

        saveButton.addActionListener(e -> {
            try {
                int empNum = Integer.parseInt(tfEmpNum.getText().trim());
                String lastName = tfLastName.getText().trim();
                String firstName = tfFirstName.getText().trim();
                java.time.LocalDate birthday = java.time.LocalDate.parse(tfBirthday.getText().trim());
                String address = tfAddress.getText().trim();
                String phone = tfPhone.getText().trim();
                String sss = tfSSS.getText().trim();
                String philhealth = tfPhilHealth.getText().trim();
                String tin = tfTIN.getText().trim();
                String pagibig = tfPagibig.getText().trim();
                String status = tfStatus.getText().trim();
                String positionName = tfPosition.getText().trim();
                String supervisorName = tfSupervisor.getText().trim();
                double basicSalary = Double.parseDouble(tfBasicSalary.getText().replace(",", "").replace("\"", "").trim());
                double riceSubsidy = Double.parseDouble(tfRiceSubsidy.getText().replace(",", "").replace("\"", "").trim());
                double phoneAllowance = Double.parseDouble(tfPhoneAllowance.getText().replace(",", "").replace("\"", "").trim());
                double clothingAllowance = Double.parseDouble(tfClothingAllowance.getText().replace(",", "").replace("\"", "").trim());
                double semiGross = Double.parseDouble(tfSemiGross.getText().replace(",", "").replace("\"", "").trim());
                double hourlyRate = Double.parseDouble(tfHourlyRate.getText().replace(",", "").replace("\"", "").trim());
                com.compprog1282025.model.ContactInfo contact = new com.compprog1282025.model.ContactInfo(address, phone);
                com.compprog1282025.model.GovernmentID govID = new com.compprog1282025.model.GovernmentID(sss, philhealth, tin, pagibig);
                com.compprog1282025.model.Compensation comp = new com.compprog1282025.model.Compensation(basicSalary, riceSubsidy, phoneAllowance, clothingAllowance, semiGross, hourlyRate);
                com.compprog1282025.model.Position position = new com.compprog1282025.model.Position(positionName, null);
                // Supervisor resolution
                if (!supervisorName.isEmpty()) {
                    Employee supervisor = employeeList.stream()
                        .filter(sup -> (sup.getFirstName() + " " + sup.getLastName()).equalsIgnoreCase(supervisorName)
                            || (sup.getLastName() + ", " + sup.getFirstName()).equalsIgnoreCase(supervisorName)
                            || (sup.getLastName() + " " + sup.getFirstName()).equalsIgnoreCase(supervisorName))
                        .findFirst().orElse(null);
                    position.setSupervisor(supervisor);
                }
                Employee newEmp = new Employee(empNum, firstName, lastName, birthday, contact, govID, position, comp, status, "");
                employeeList.add(newEmp);
                CSVWriter.writeAllEmployeesToCSV(employeeList, "src/main/resources/employees.csv");
                newFrame.dispose();
                showAdminDashboard();
                JOptionPane.showMessageDialog(this, "New employee added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error adding employee: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        newFrame.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UnfinishedGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UnfinishedGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UnfinishedGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UnfinishedGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UnfinishedGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdmin;
    private javax.swing.JButton jButtonEmployee;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
} 
