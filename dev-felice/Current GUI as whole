package com.compprog1282025.gui;

import com.compprog1282025.auth.UserRole;
import com.compprog1282025.model.Employee;
import com.compprog1282025.model.Attendance;
import com.compprog1282025.service.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.File;
import java.time.YearMonth;
import java.util.List;
import java.awt.Dialog.ModalityType; //add this
import java.awt.Window;//add this


public class MainGUI extends JFrame {

    private final EmployeeService employeeService;
    private final AttendanceService attendanceService;
    private final PayrollService payrollService;
    private final List<Employee> employees;

    public MainGUI() {
        // Load data
        DataLoaderService loader = new DataLoaderService();
        loader.loadAllData();

        employees = loader.getEmployees();
        List<Attendance> attendanceRecords = loader.getAttendanceRecords();

        attendanceService = new AttendanceService(attendanceRecords);
        payrollService = new PayrollService(attendanceService);
        employeeService = new EmployeeService(employees);

        initUI();
    }

    private void initUI() {
        setTitle("Payroll System");
        setSize(500, 300);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();

        JLabel label = new JLabel("Login as:");
        label.setFont(new Font("Segoe UI", Font.BOLD, 18));

        JButton employeeBtn = new JButton("Employee"); // i want this style
        JButton adminBtn = new JButton("Admin");

        employeeBtn.setPreferredSize(new Dimension(120, 35)); // this is the dimension
        adminBtn.setPreferredSize(new Dimension(120, 35));

        employeeBtn.addActionListener(e -> employeeLogin());
        adminBtn.addActionListener(e -> showAdminMenu());

        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        panel.add(label, gbc);

        gbc.gridwidth = 1;
        gbc.gridy = 1;
        gbc.gridx = 0;
        panel.add(employeeBtn, gbc);

        gbc.gridx = 1;
        panel.add(adminBtn, gbc);

        add(panel);
    }

   private void employeeLogin() {
    String input = StyledInputDialog(this, "Employee Login", "Enter your Employee Number:");
    if (input == null) return; // Cancel pressed
    try {
        int empNum = Integer.parseInt(input.trim());
        Employee employee = employeeService.findEmployeeByNumber(empNum);
        if (employee != null) {
            showEmployeeDashboard(employee);
        } else {
            // Use your custom error dialog if you have one, or keep JOptionPane
            StyledErrorDialog(this, "Error", "Employee not found.");
        }
    } catch (NumberFormatException e) {
        StyledErrorDialog(this, "Error", "Invalid employee number.");
    }
}

    private void showEmployeeDashboard(Employee employee) { //I SHALL RETURN
        JDialog dialog = new JDialog(this, "Employee Dashboard - " + employee.getFullName(), true);
        dialog.setSize(500, 300);
        dialog.setLocationRelativeTo(this);
        dialog.setLayout(new BorderLayout(10, 10));

        JTextArea infoArea = new JTextArea();
        infoArea.setEditable(false);
        infoArea.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        infoArea.setText(String.format(
                "Name: %s\nPosition: %s\nHourly Rate: %.2f\n\nCompensations:\n  Rice Subsidy: %.2f\n  Phone Allowance: %.2f\n  Clothing Allowance: %.2f",
                employee.getFullName(), employee.getPosition(), employee.getHourlyRate(),
                employee.getCompensation().getRiceSubsidy(),
                employee.getCompensation().getPhoneAllowance(),
                employee.getCompensation().getClothingAllowance()));

        dialog.add(new JScrollPane(infoArea), BorderLayout.CENTER);

        JButton viewSalaryBtn = new JButton("View Monthly Salary");
        JButton closeBtn = new JButton("Close");
       
        styleButtonSmall(viewSalaryBtn);
        viewSalaryBtn.setPreferredSize(new Dimension(150, 30));
        viewSalaryBtn.setMaximumSize(new Dimension(150, 30));

        styleButtonSmall(closeBtn);
        closeBtn.setPreferredSize(new Dimension(60, 30));
        closeBtn.setMaximumSize(new Dimension(60, 30));

        JPanel btnPanel = new JPanel();
        btnPanel.add(viewSalaryBtn);
        btnPanel.add(closeBtn);

        viewSalaryBtn.addActionListener(e -> { //custom prompt
            String input = StyledInputDialog(dialog, "Enter Month and Year", "Enter target month and year (yyyy-MM):");
            if (input == null) return;

            try {
                YearMonth ym = YearMonth.parse(input.trim());
                double gross = payrollService.calculateMonthlySalary(employee, ym);
                double net = payrollService.calculateNetSalary(employee, ym);
                String message = String.format("Payroll Summary for %s\nGross Salary: %.2f\nNet Salary: %.2f", ym, gross, net);
                    StyledInfoDialog(dialog, "Payroll Summary", message);

            } catch (Exception ex) {
                StyledErrorDialog(dialog, "Error", "Invalid date format. Use yyyy-MM.");
            }   
        });

        closeBtn.addActionListener(e -> dialog.dispose());

        dialog.add(btnPanel, BorderLayout.SOUTH);
        dialog.setVisible(true);
    }

    private void showAdminMenu() {// THIS IS DONE
        JDialog dialog = new JDialog(this, "Admin Menu", true);
        dialog.setSize(600, 450);
        dialog.setLocationRelativeTo(this);
        dialog.setLayout(new BorderLayout());

        String[] menuOptions = {
                "View All Employees",
                "Salary Calculation",
                "Export Payroll Report to CSV",
                "Exit"
        };

        // create a panel to hold buttons with vertical box layout
        JPanel menuPanel = new JPanel();
        menuPanel.setLayout(new BoxLayout(menuPanel, BoxLayout.Y_AXIS));
        menuPanel.setBackground(Color.WHITE);
        menuPanel.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));

        // add vertical 'glue' to push buttons to center the buttons
        menuPanel.add(Box.createVerticalGlue());

        // create buttons for each menu option with spacing--also the visual part
        for (String option : menuOptions) {
            JButton button = new JButton(option);
            styleButton(button);
            button.setPreferredSize(new Dimension(300, 40));
            button.setMaximumSize(new Dimension(300, 40));
            button.setAlignmentX(Component.CENTER_ALIGNMENT);

            menuPanel.add(Box.createVerticalStrut(10)); // space between buttons
            menuPanel.add(button);

            button.addActionListener(e -> {
                switch (option) {
                    case "View All Employees" -> showEmployeeList(dialog);
                    case "Salary Calculation" -> salaryCalculationMenu(dialog);
                    case "Export Payroll Report to CSV" -> exportPayrollReport(dialog);
                    case "Exit" -> dialog.dispose();
        }
    });
}
        // sdd more 'glue' after buttons to keep everything vertically centered
        menuPanel.add(Box.createVerticalGlue());
        
        dialog.add(menuPanel, BorderLayout.CENTER);

        dialog.setVisible(true);
    }

    private void showEmployeeList(Component parent) {
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(parent), "All Employees", true);
        dialog.setSize(700, 400);
        dialog.setLocationRelativeTo(parent);

        String[] columns = {"Employee Number", "Full Name", "Position", "Hourly Rate"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);

        for (Employee e : employees) {
            model.addRow(new Object[]{
                    e.getEmployeeNumber(),
                    e.getFullName(),
                    e.getPosition(),
                    e.getHourlyRate()
            });
        }

        JTable table = new JTable(model);
        table.setFont(new Font("Segoe UI", Font.PLAIN, 14)); // Set font for table cells
        table.getTableHeader().setFont(new Font("Segoe UI", Font.PLAIN, 15)); // Set font for table header

        JScrollPane scrollPane = new JScrollPane(table);

        dialog.add(scrollPane);
        dialog.setVisible(true);
    }

    private void salaryCalculationMenu(Component parent) { // THIS IS DONE
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(parent), "Salary Calculation", true);
        dialog.setSize(400, 350);
        dialog.setLocationRelativeTo(parent);
        dialog.setLayout(new BorderLayout());

        String[] options = {
            "Gross Salary for ALL employees",
            "Net Salary for ALL employees",
            "Gross Salary for specific employee",
            "Net Salary for specific employee",
            "Close"
        };

        JPanel menuPanel = new JPanel();
        menuPanel.setLayout(new BoxLayout(menuPanel, BoxLayout.Y_AXIS));
        menuPanel.setBackground(Color.WHITE);
        menuPanel.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));

        menuPanel.add(Box.createVerticalGlue());

        for (String option : options) {
            JButton button = new JButton(option);
            styleButton(button);
            button.setPreferredSize(new Dimension(300, 40));
            button.setMaximumSize(new Dimension(300, 40));
            button.setAlignmentX(Component.CENTER_ALIGNMENT);

            menuPanel.add(Box.createVerticalStrut(10));
            menuPanel.add(button);

            button.addActionListener(e -> {
                switch (option) {
                    case "Gross Salary for ALL employees" -> {
                        YearMonth ym = promptYearMonth(dialog);
                        if (ym == null) return;
                        StringBuilder sb = new StringBuilder("Gross Salaries for " + ym + ":\n\n");
                        for (Employee emp : employees) {
                            double gross = payrollService.calculateMonthlySalary(emp, ym);
                            sb.append(String.format("Employee %d (%s): %.2f%n", emp.getEmployeeNumber(), emp.getFullName(), gross));
                        }
                        showLongText(dialog, "Gross Salaries", sb.toString());
                    }
                    case "Net Salary for ALL employees" -> {
                        YearMonth ym = promptYearMonth(dialog);
                        if (ym == null) return;
                        StringBuilder sb = new StringBuilder("Net Salaries for " + ym + ":\n\n");
                        for (Employee emp : employees) {
                            double net = payrollService.calculateNetSalary(emp, ym);
                            sb.append(String.format("Employee %d (%s): %.2f%n", emp.getEmployeeNumber(), emp.getFullName(), net));
                        }
                        showLongText(dialog, "Net Salaries", sb.toString());
                    }
                    case "Gross Salary for specific employee" -> {
                        Employee emp = promptEmployeeNumber(dialog);
                        if (emp == null) return;
                        YearMonth ym = promptYearMonth(dialog);
                        if (ym == null) return;
                        double gross = payrollService.calculateMonthlySalary(emp, ym);
                        JOptionPane.showMessageDialog(dialog, String.format("Gross Salary for %s in %s: %.2f",
                                emp.getFullName(), ym, gross));
                    }
                    case "Net Salary for specific employee" -> {
                        Employee emp = promptEmployeeNumber(dialog);
                        if (emp == null) return;
                        YearMonth ym = promptYearMonth(dialog);
                        if (ym == null) return;
                        double net = payrollService.calculateNetSalary(emp, ym);
                        JOptionPane.showMessageDialog(dialog, String.format("Net Salary for %s in %s: %.2f",
                                emp.getFullName(), ym, net));
                    }
                    case "Close" -> dialog.dispose();
                }
            });
        }

        menuPanel.add(Box.createVerticalGlue());
        dialog.add(menuPanel, BorderLayout.CENTER);
        dialog.setVisible(true);
}

    private void exportPayrollReport(Component parent) {
        YearMonth ym = promptYearMonth(parent);
        if (ym == null) return;

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select CSV File to Save Payroll Report");
        fileChooser.setSelectedFile(new File("payroll_report_" + ym + ".csv"));

        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                payrollService.exportPayrollReportToCSV(employees, ym, fileToSave.getAbsolutePath());
                JOptionPane.showMessageDialog(this, "Payroll report exported to:\n" + fileToSave.getAbsolutePath());
            } catch (Exception e) {
                StyledErrorDialog(this, "Error", "Error exporting CSV: " + e.getMessage());
            }
        }
    }

    // Helper dialogs
    private void styleButton(JButton button) {
        button.setFocusPainted(false);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        button.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
        button.setBackground(new Color(245, 245, 245));
}
    private void styleButtonSmall(JButton button) {
        button.setFocusPainted(false);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        button.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
        button.setBackground(new Color(245, 245, 245));
}
    private YearMonth promptYearMonth(Component parent) {
    String input = StyledInputDialog(parent, "Enter Month and Year", "Enter month and year (yyyy-MM):");
    if (input == null) return null;
    try {
        return YearMonth.parse(input.trim());
    } catch (Exception e) {
        StyledErrorDialog(parent, "Error", "Invalid format. Use yyyy-MM.");
        return null;
    }
}
    private Employee promptEmployeeNumber(Component parent) { //DONE
    String input = StyledInputDialog(parent, "Enter Employee Number", "Enter employee number:");
    if (input == null) return null; // User cancelled

    try {
        int empNum = Integer.parseInt(input.trim());
        Employee emp = employeeService.findEmployeeByNumber(empNum);
        if (emp == null) {
            JOptionPane.showMessageDialog(parent, "Employee not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return emp;
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(parent, "Invalid employee number.", "Error", JOptionPane.ERROR_MESSAGE);
        return null;
    }
}

    private void showLongText(Component parent, String title, String content) {
    JDialog dialog = new JDialog(SwingUtilities.getWindowAncestor(parent), title, Dialog.ModalityType.APPLICATION_MODAL);
    dialog.setSize(600, 400);
    dialog.setLocationRelativeTo(parent);
    dialog.setLayout(new BorderLayout(10, 10));

    JTextArea area = new JTextArea(20, 50);
    area.setText(content);
    area.setEditable(false);
    area.setFont(new Font("Segoe UI", Font.PLAIN, 14));
    area.setLineWrap(true);
    area.setWrapStyleWord(true);

    JScrollPane scrollPane = new JScrollPane(area);
    dialog.add(scrollPane, BorderLayout.CENTER);

    JButton okButton = new JButton("OK");
    styleButtonSmall(okButton);
    okButton.setPreferredSize(new Dimension(80, 30));
    okButton.setMaximumSize(new Dimension(80, 30));
    okButton.addActionListener(e -> dialog.dispose());

    JPanel buttonPanel = new JPanel();
    buttonPanel.add(okButton);
    dialog.add(buttonPanel, BorderLayout.SOUTH);

    dialog.setVisible(true);
}

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new MainGUI().setVisible(true));
    }
    
    private String StyledInputDialog(Component parent, String title, String message) { //DONE
    JDialog inputDialog = new JDialog((Window) SwingUtilities.getWindowAncestor(parent), title, ModalityType.APPLICATION_MODAL);
    inputDialog.setLayout(new BorderLayout(10, 10));
    inputDialog.setSize(350, 130);
    inputDialog.setLocationRelativeTo(parent);

    JTextField inputField = new JTextField();
    inputField.setPreferredSize(new Dimension(325, 25)); //text area

    JButton okButton = new JButton("OK");
    JButton cancelButton = new JButton("Cancel");

    // Apply your custom button styling
    styleButtonSmall(okButton);
    okButton.setPreferredSize(new Dimension(60, 30));
    okButton.setMaximumSize(new Dimension(60, 30));

    styleButtonSmall(cancelButton);
    cancelButton.setPreferredSize(new Dimension(60, 30));
    cancelButton.setMaximumSize(new Dimension(60, 30));

    final String[] result = new String[1]; // Used to hold input result
    result[0] = null;

    okButton.addActionListener(e -> {
        result[0] = inputField.getText().trim();
        inputDialog.dispose();
    });

    cancelButton.addActionListener(e -> {
        result[0] = null;
        inputDialog.dispose();
    });

    JPanel inputPanel = new JPanel(new BorderLayout());
    inputPanel.add(new JLabel(message), BorderLayout.NORTH);

    JPanel inputFieldWrapper = new JPanel(new FlowLayout(FlowLayout.LEFT));
    inputFieldWrapper.add(inputField);
    inputPanel.add(inputFieldWrapper, BorderLayout.CENTER);


    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
    buttonPanel.add(okButton);
    buttonPanel.add(cancelButton);

    inputDialog.add(inputPanel, BorderLayout.CENTER);
    inputDialog.add(buttonPanel, BorderLayout.SOUTH);
    inputDialog.setVisible(true);

    return result[0]; // Returns null if cancelled
}
    private void StyledErrorDialog(Component parent, String title, String message) { //DONE
    JDialog errorDialog = new JDialog((Window) SwingUtilities.getWindowAncestor(parent), title, Dialog.ModalityType.APPLICATION_MODAL);
    errorDialog.setLayout(new BorderLayout(10, 10));
    errorDialog.setSize(300, 130);
    errorDialog.setLocationRelativeTo(parent);

    JLabel messageLabel = new JLabel(message);
    messageLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
    messageLabel.setHorizontalAlignment(SwingConstants.CENTER);

    JButton okButton = new JButton("OK");
    styleButtonSmall(okButton);
    okButton.setPreferredSize(new Dimension(60, 30));
    okButton.setMaximumSize(new Dimension(60, 30));
    okButton.addActionListener(e -> errorDialog.dispose());

    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
    buttonPanel.add(okButton);

    errorDialog.add(messageLabel, BorderLayout.CENTER);
    errorDialog.add(buttonPanel, BorderLayout.SOUTH);
    errorDialog.setVisible(true);
}
    private void StyledInfoDialog(Component parent, String title, String message) {
    JDialog dialog = new JDialog((Window) SwingUtilities.getWindowAncestor(parent), title, Dialog.ModalityType.APPLICATION_MODAL);
    dialog.setLayout(new BorderLayout(10, 10));
    dialog.setSize(350, 180);
    dialog.setLocationRelativeTo(parent);

    JTextArea messageArea = new JTextArea(message);
    messageArea.setEditable(false);
    messageArea.setFont(new Font("Segoe UI", Font.PLAIN, 14));
    messageArea.setWrapStyleWord(true);
    messageArea.setLineWrap(true);
    messageArea.setBackground(dialog.getBackground());
    messageArea.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

    JButton okButton = new JButton("OK");
    styleButtonSmall(okButton);
    okButton.setPreferredSize(new Dimension(60, 30));

    okButton.addActionListener(e -> dialog.dispose());

    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
    buttonPanel.add(okButton);

    dialog.add(new JScrollPane(messageArea), BorderLayout.CENTER);
    dialog.add(buttonPanel, BorderLayout.SOUTH);

    dialog.setVisible(true);
}



}

